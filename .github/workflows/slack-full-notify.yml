name: 🔔 Kapsamli Slack Bildirimleri

on:
  # Push events - tum branchler
  push:
    branches: ['**']
  
  # Branch/Tag olusturma ve silme
  create:
  delete:
  
  # Pull Request events
  pull_request:
    types: [opened, closed, reopened, edited, synchronize, ready_for_review, converted_to_draft]
  
  # Pull Request Review events
  pull_request_review:
    types: [submitted, edited, dismissed]
  
  # Pull Request Review Comment events
  pull_request_review_comment:
    types: [created, edited, deleted]
  
  # Issue events
  issues:
    types: [opened, closed, reopened, edited, deleted, transferred, assigned, unassigned, labeled, unlabeled]
  
  # Issue Comment events
  issue_comment:
    types: [created, edited, deleted]
  
  # Discussion events
  discussion:
    types: [created, edited, deleted, transferred, answered, unanswered]
  
  # Discussion Comment events
  discussion_comment:
    types: [created, edited, deleted]
  
  # Release events
  release:
    types: [published, edited, deleted, prereleased, released]
  
  # Wiki events
  gollum:
  
  # Star events
  watch:
    types: [started]
  
  # Fork events
  fork:

jobs:
  slack-notify:
    name: Slack Bildirim Gonder
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Event Bilgilerini Hazirla
        id: prepare
        run: |
          echo "event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "repo_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          
      - name: 🔔 Slack Mesaji Gonder
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          EVENT_NAME="${{ steps.prepare.outputs.event_name }}"
          ACTOR="${{ steps.prepare.outputs.actor }}"
          REPO="${{ steps.prepare.outputs.repo }}"
          BRANCH="${{ steps.prepare.outputs.branch }}"
          SHA_SHORT="${{ steps.prepare.outputs.sha_short }}"
          REPO_URL="${{ steps.prepare.outputs.repo_url }}"
          TIMESTAMP="${{ steps.prepare.outputs.timestamp }}"
          
          # URL kontrolu
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "❌ SLACK_WEBHOOK_URL secret tanimlanmamis!"
            exit 1
          fi
          
          # Event'e gore mesaj olustur
          case "$EVENT_NAME" in
            push)
              COMMIT_MSG="${{ github.event.head_commit.message }}"
              COMMIT_URL="${{ github.event.head_commit.url }}"
              
              if [ -n "$COMMIT_MSG" ]; then
                # Commit mesajini temizle (JSON icin)
                CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 200)
                TEXT="🚀 **${ACTOR}** \`${BRANCH}\` branch'ine commit atti:\\n> 📝 *${CLEAN_MSG}*\\n🔗 <${COMMIT_URL}|${SHA_SHORT}>"
              else
                TEXT="🚀 **${ACTOR}** \`${BRANCH}\` branch'ine commit atti\\n🔗 <${REPO_URL}/commit/${SHA_SHORT}|${SHA_SHORT}>"
              fi
              ;;
              
            create)
              REF_TYPE="${{ github.event.ref_type }}"
              REF="${{ github.event.ref }}"
              
              if [ "$REF_TYPE" = "branch" ]; then
                TEXT="🌿 **${ACTOR}** yeni branch olusturdu: \`${REF}\`\\n🔗 <${REPO_URL}/tree/${REF}|Branch'i goruntule>"
              else
                TEXT="🏷️ **${ACTOR}** yeni tag olusturdu: \`${REF}\`\\n🔗 <${REPO_URL}/releases/tag/${REF}|Tag'i goruntule>"
              fi
              ;;
              
            delete)
              REF_TYPE="${{ github.event.ref_type }}"
              REF="${{ github.event.ref }}"
              
              TEXT="🗑️ **${ACTOR}** ${REF_TYPE} sildi: \`${REF}\`"
              ;;
              
            pull_request)
              PR_TITLE="${{ github.event.pull_request.title }}"
              PR_URL="${{ github.event.pull_request.html_url }}"
              PR_NUMBER="${{ github.event.pull_request.number }}"
              PR_ACTION="${{ github.event.action }}"
              BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
              HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
              
              # PR title'i temizle
              CLEAN_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              
              case "$PR_ACTION" in
                opened)
                  TEXT="📋 **${ACTOR}** yeni Pull Request acti:\\n> 🎯 *${CLEAN_TITLE}*\\n📊 \`${HEAD_BRANCH}\` → \`${BASE_BRANCH}\`\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                closed)
                  if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                    TEXT="✅ **${ACTOR}** Pull Request'i merge etti:\\n> 🎯 *${CLEAN_TITLE}*\\n📊 \`${HEAD_BRANCH}\` → \`${BASE_BRANCH}\`\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  else
                    TEXT="❌ **${ACTOR}** Pull Request'i kapatti:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  fi
                  ;;
                synchronize)
                  TEXT="🔄 **${ACTOR}** Pull Request'i guncelledi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                ready_for_review)
                  TEXT="👀 **${ACTOR}** Pull Request'i incelemeye hazir hale getirdi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                converted_to_draft)
                  TEXT="📝 **${ACTOR}** Pull Request'i draft'a cevirdi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                *)
                  TEXT="🔄 **${ACTOR}** Pull Request'te degisiklik yapti (${PR_ACTION}):\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
              esac
              ;;
              
            pull_request_review)
              PR_TITLE="${{ github.event.pull_request.title }}"
              PR_URL="${{ github.event.pull_request.html_url }}"
              PR_NUMBER="${{ github.event.pull_request.number }}"
              REVIEW_STATE="${{ github.event.review.state }}"
              
              CLEAN_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              
              case "$REVIEW_STATE" in
                approved)
                  TEXT="✅ **${ACTOR}** Pull Request'i onayladi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                changes_requested)
                  TEXT="🔄 **${ACTOR}** Pull Request'te degisiklik istedi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                commented)
                  TEXT="💬 **${ACTOR}** Pull Request'e yorum yapti:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
                *)
                  TEXT="👀 **${ACTOR}** Pull Request'i inceledi:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
                  ;;
              esac
              ;;
              
            pull_request_review_comment)
              PR_TITLE="${{ github.event.pull_request.title }}"
              PR_URL="${{ github.event.pull_request.html_url }}"
              PR_NUMBER="${{ github.event.pull_request.number }}"
              
              CLEAN_TITLE=$(echo "$PR_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              TEXT="💬 **${ACTOR}** Pull Request review'unda yorum yapti:\\n> 🎯 *${CLEAN_TITLE}*\\n🔗 <${PR_URL}|PR #${PR_NUMBER}>"
              ;;
              
            issues)
              ISSUE_TITLE="${{ github.event.issue.title }}"
              ISSUE_URL="${{ github.event.issue.html_url }}"
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              ISSUE_ACTION="${{ github.event.action }}"
              
              CLEAN_TITLE=$(echo "$ISSUE_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              
              case "$ISSUE_ACTION" in
                opened)
                  TEXT="🐛 **${ACTOR}** yeni Issue acti:\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
                closed)
                  TEXT="✅ **${ACTOR}** Issue'yu kapatti:\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
                reopened)
                  TEXT="🔄 **${ACTOR}** Issue'yu yeniden acti:\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
                assigned)
                  ASSIGNEE="${{ github.event.assignee.login }}"
                  TEXT="👤 **${ACTOR}** Issue'yu ${ASSIGNEE}'ye atadi:\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
                labeled)
                  LABEL="${{ github.event.label.name }}"
                  TEXT="🏷️ **${ACTOR}** Issue'ya \`${LABEL}\` etiketi ekledi:\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
                *)
                  TEXT="🔄 **${ACTOR}** Issue'yu guncelledi (${ISSUE_ACTION}):\\n> 📝 *${CLEAN_TITLE}*\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
                  ;;
              esac
              ;;
              
            issue_comment)
              ISSUE_TITLE="${{ github.event.issue.title }}"
              ISSUE_URL="${{ github.event.issue.html_url }}"
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              COMMENT_BODY="${{ github.event.comment.body }}"
              
              CLEAN_TITLE=$(echo "$ISSUE_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 100)
              CLEAN_COMMENT=$(echo "$COMMENT_BODY" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 100)
              
              TEXT="💬 **${ACTOR}** Issue'ya yorum yapti:\\n> 📝 *${CLEAN_TITLE}*\\n> 💭 ${CLEAN_COMMENT}...\\n🔗 <${ISSUE_URL}|Issue #${ISSUE_NUMBER}>"
              ;;
              
            discussion)
              DISCUSSION_TITLE="${{ github.event.discussion.title }}"
              DISCUSSION_URL="${{ github.event.discussion.html_url }}"
              DISCUSSION_ACTION="${{ github.event.action }}"
              
              CLEAN_TITLE=$(echo "$DISCUSSION_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              TEXT="🗣️ **${ACTOR}** Discussion ${DISCUSSION_ACTION}:\\n> 💬 *${CLEAN_TITLE}*\\n🔗 <${DISCUSSION_URL}|Discussion'i goruntule>"
              ;;
              
            discussion_comment)
              DISCUSSION_TITLE="${{ github.event.discussion.title }}"
              DISCUSSION_URL="${{ github.event.discussion.html_url }}"
              
              CLEAN_TITLE=$(echo "$DISCUSSION_TITLE" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 150)
              TEXT="💬 **${ACTOR}** Discussion'a yorum yapti:\\n> 🗣️ *${CLEAN_TITLE}*\\n🔗 <${DISCUSSION_URL}|Discussion'i goruntule>"
              ;;
              
            release)
              RELEASE_NAME="${{ github.event.release.name }}"
              RELEASE_TAG="${{ github.event.release.tag_name }}"
              RELEASE_URL="${{ github.event.release.html_url }}"
              RELEASE_ACTION="${{ github.event.action }}"
              
              CLEAN_NAME=$(echo "$RELEASE_NAME" | sed 's/"/\\"/g' | tr '\n' ' ' | head -c 100)
              TEXT="🎉 **${ACTOR}** yeni release yayinladi (${RELEASE_ACTION}):\\n> 🏷️ *${CLEAN_NAME}* (${RELEASE_TAG})\\n🔗 <${RELEASE_URL}|Release'i goruntule>"
              ;;
              
            watch)
              TEXT="⭐ **${ACTOR}** repository'yi yildizladi!\\n🔗 <${REPO_URL}|${REPO}>"
              ;;
              
            fork)
              FORK_URL="${{ github.event.forkee.html_url }}"
              TEXT="🍴 **${ACTOR}** repository'yi fork'ladi!\\n🔗 <${FORK_URL}|Fork'u goruntule>"
              ;;
              
            gollum)
              TEXT="📚 **${ACTOR}** Wiki'yi guncelledi\\n🔗 <${REPO_URL}/wiki|Wiki'yi goruntule>"
              ;;
              
            *)
              TEXT="📢 **${ACTOR}** bir etkinlik gerceklestirdi: *${EVENT_NAME}*\\n🔗 <${REPO_URL}|${REPO}>"
              ;;
          esac
          
          # Slack formatinda JSON payload olustur
          PAYLOAD=$(cat <<EOF
          {
            "text": "${TEXT}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${TEXT}"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "📅 ${TIMESTAMP} | 🏷️ Event: \`${EVENT_NAME}\` | 📂 <${REPO_URL}|${REPO}>"
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          # Slack'e gonder
          PAYLOAD_FILE=$(mktemp)
          echo "$PAYLOAD" > "$PAYLOAD_FILE"

          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H 'Content-type: application/json' \
            --data-binary "@$PAYLOAD_FILE" \
            "$SLACK_WEBHOOK_URL")
          
          rm "$PAYLOAD_FILE"
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Slack bildirimi basariyla gonderildi: $EVENT_NAME (HTTP $HTTP_CODE)"
          else
            echo "❌ Slack bildirimi gonderilemedi: HTTP $HTTP_CODE"
            exit 1
          fi 
