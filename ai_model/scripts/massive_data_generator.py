"""
üöÄ MASSIVE TELEKOM DIALOGS GENERATOR
====================================

Bu script, √ßok b√ºy√ºk miktarda diyalog verisi √ºretmek i√ßin tasarlanmƒ±≈ütƒ±r.
- 1000+ seed diyalog
- 20+ varyant per seed
- Geli≈ümi≈ü augmentation
- Paralel i≈üleme
"""

import json
import csv
import random
import re
import uuid
from datetime import datetime
from typing import List, Dict, Any, Optional
from pathlib import Path
import logging
import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor, as_completed

# Import existing generator
from telekom_dialogs_generator import TelekomDialogsGenerator

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MassiveDataGenerator:
    """
    B√ºy√ºk √∂l√ßekli veri √ºretimi i√ßin geli≈ümi≈ü generator
    """
    
    def __init__(self):
        self.project_root = Path(__file__).resolve().parents[2]
        self.output_file = self.project_root / "ai_model" / "data" / "massive_telekom_dialogs.jsonl"
        
        # Geli≈ümi≈ü paraphrasing templates
        self.advanced_templates = {
            "greetings": [
                "Merhaba", "Selam", "ƒ∞yi g√ºnler", "G√ºnaydƒ±n", "Merhabalar",
                "Ho≈ü geldiniz", "Nasƒ±lsƒ±nƒ±z", "Merhaba, size nasƒ±l yardƒ±mcƒ± olabilirim?",
                "Selamlar", "ƒ∞yi ak≈üamlar", "Ho≈ü buldum", "Merhaba efendim",
                "G√ºnaydƒ±n, nasƒ±lsƒ±nƒ±z?", "ƒ∞yi g√ºnler, size nasƒ±l yardƒ±mcƒ± olabilirim?"
            ],
            "farewells": [
                "Ba≈üka bir konuda yardƒ±mcƒ± olabilir miyim?", "Ba≈üka bir sorunuz var mƒ±?",
                "Ba≈üka bir konuda destek almak ister misiniz?", "Ba≈üka bir i≈üleminiz var mƒ±?",
                "Ba≈üka bir konuda yardƒ±ma ihtiyacƒ±nƒ±z var mƒ±?", "Ba≈üka bir konuda sorunuz var mƒ±?",
                "Ba≈üka bir konuda yardƒ±m ister misiniz?", "Ba≈üka bir konuda destek almak istiyor musunuz?",
                "Ba≈üka bir konuda i≈üleminiz var mƒ±?", "Ba≈üka bir konuda yardƒ±ma ihtiyacƒ±nƒ±z var mƒ±?"
            ],
            "processing": [
                "Kontrol ediyorum", "Bakƒ±yorum", "ƒ∞nceliyorum", "Ara≈ütƒ±rƒ±yorum",
                "Kontrol ediyorum", "Bilgilerinizi kontrol ediyorum", "Sistemde arƒ±yorum",
                "Sistemde kontrol ediyorum", "Bilgilerinizi inceliyorum", "Sistemde ara≈ütƒ±rƒ±yorum",
                "Kontrol ediyorum efendim", "Bakƒ±yorum hemen", "ƒ∞nceliyorum ≈üimdi",
                "Ara≈ütƒ±rƒ±yorum sistemde", "Kontrol ediyorum bilgilerinizi"
            ]
        }
        
        # Geli≈ümi≈ü augmentation patterns
        self.advanced_augmentation = {
            "punctuation": [".", "!", "?", "...", "!!", "??", "?!", "!?", "..", "..."],
            "noise_words": [
                "efendim", "≈üey", "yani", "i≈üte", "bakƒ±n", "anlƒ±yorsunuz",
                "efendim", "≈üey", "yani", "i≈üte", "bakƒ±n", "anlƒ±yorsunuz",
                "efendim", "≈üey", "yani", "i≈üte", "bakƒ±n", "anlƒ±yorsunuz"
            ],
            "fillers": [
                "bir dakika", "bir saniye", "hemen", "≈üimdi", "az √∂nce",
                "biraz √∂nce", "az √∂nce", "hemen bakƒ±yorum", "≈üimdi bakƒ±yorum",
                "hemen kontrol ediyorum", "≈üimdi kontrol ediyorum", "az √∂nce kontrol ettim",
                "biraz √∂nce baktƒ±m", "hemen inceliyorum", "≈üimdi ara≈ütƒ±rƒ±yorum"
            ]
        }
        
        logger.info("üöÄ MassiveDataGenerator ba≈ülatƒ±ldƒ±")

    def generate_massive_seed_dialogs(self, num_seeds: int = 1000) -> List[Dict[str, Any]]:
        """B√ºy√ºk miktarda seed diyalog √ºretir"""
        
        # Temel senaryo kalƒ±plarƒ±
        base_scenarios = {
            "billing": [
                ("Fatura bilgilerimi √∂ƒürenmek istiyorum", "Fatura bilgilerinizi kontrol ediyorum"),
                ("Faturamƒ± √∂demek istiyorum", "Fatura √∂deme i≈üleminizi yapƒ±yorum"),
                ("Ge√ßmi≈ü faturalarƒ±mƒ± g√∂rmek istiyorum", "Ge√ßmi≈ü faturalarƒ±nƒ±zƒ± listeliyorum"),
                ("Fatura √∂deme planƒ± yapmak istiyorum", "Taksitli √∂deme planƒ± olu≈üturuyorum"),
                ("Fatura tarihini deƒüi≈ütirmek istiyorum", "Fatura tarihini g√ºncelliyorum"),
                ("Otomatik √∂deme kurmak istiyorum", "Otomatik √∂deme sistemini kuruyorum"),
                ("Fatura √∂dememi yaptƒ±m ama g√∂r√ºnm√ºyor", "√ñdemenizi kontrol ediyorum"),
                ("Fatura indirimi var mƒ±?", "Mevcut indirimleri kontrol ediyorum"),
                ("Fatura ≈üikayetim var", "≈ûikayetinizi kayƒ±t altƒ±na alƒ±yorum"),
                ("Fatura detaylarƒ±nƒ± g√∂rmek istiyorum", "Fatura detaylarƒ±nƒ± a√ßƒ±klƒ±yorum")
            ],
            "technical_support": [
                ("ƒ∞nternet hƒ±zƒ±m yava≈ü", "ƒ∞nternet hƒ±zƒ±nƒ±zƒ± test ediyorum"),
                ("ƒ∞nternet baƒülantƒ±m kesiliyor", "Baƒülantƒ± sorununuzu kontrol ediyorum"),
                ("SMS g√∂nderemiyorum", "SMS sorununuzu inceliyorum"),
                ("Arama yapamƒ±yorum", "Arama sorununuzu kontrol ediyorum"),
                ("Sinyal sorunu ya≈üƒ±yorum", "Sinyal durumunuzu kontrol ediyorum"),
                ("Modem sorunum var", "Modem sorununuzu inceliyorum"),
                ("Arƒ±za kaydƒ±m var", "Arƒ±za kaydƒ±nƒ±zƒ± kontrol ediyorum"),
                ("Teknik destek istiyorum", "Teknik destek ekibini y√∂nlendiriyorum"),
                ("ƒ∞nternet kotam bitti", "Kota durumunuzu kontrol ediyorum"),
                ("Hƒ±z testi yapmak istiyorum", "Hƒ±z testini ba≈ülatƒ±yorum")
            ],
            "package_management": [
                ("Paketimi deƒüi≈ütirmek istiyorum", "Paket deƒüi≈üikliƒüi yapƒ±yorum"),
                ("Yeni paket almak istiyorum", "Mevcut paketleri g√∂steriyorum"),
                ("Paket iptal etmek istiyorum", "Paket iptali i≈ülemini yapƒ±yorum"),
                ("Paket fiyatlarƒ±nƒ± √∂ƒürenmek istiyorum", "Paket fiyatlarƒ±nƒ± listeliyorum"),
                ("Roaming aktif etmek istiyorum", "Roaming hizmetinizi aktif ediyorum"),
                ("Kalan dakikamƒ± √∂ƒürenmek istiyorum", "Kalan dakikanƒ±zƒ± kontrol ediyorum"),
                ("Paket detaylarƒ±nƒ± g√∂rmek istiyorum", "Paket detaylarƒ±nƒ± a√ßƒ±klƒ±yorum"),
                ("Paket yenileme yapmak istiyorum", "Paket yenileme i≈ülemini yapƒ±yorum"),
                ("Paket kar≈üƒ±la≈ütƒ±rmasƒ± yapmak istiyorum", "Paketleri kar≈üƒ±la≈ütƒ±rƒ±yorum"),
                ("√ñzel paket teklifi istiyorum", "√ñzel teklifleri kontrol ediyorum")
            ],
            "account_management": [
                ("Hesap bilgilerimi g√ºncellemek istiyorum", "Hesap bilgilerinizi g√ºncelliyorum"),
                ("Telefon numaramƒ± deƒüi≈ütirmek istiyorum", "Numara deƒüi≈üikliƒüi yapƒ±yorum"),
                ("Hat dondurma i≈ülemi yapmak istiyorum", "Hat dondurma i≈ülemini yapƒ±yorum"),
                ("Hat transfer i≈ülemi yapmak istiyorum", "Hat transfer i≈ülemini ba≈ülatƒ±yorum"),
                ("Hesap ≈üifremi deƒüi≈ütirmek istiyorum", "≈ûifre deƒüi≈üikliƒüi yapƒ±yorum"),
                ("Hesap kapatmak istiyorum", "Hesap kapatma i≈ülemini ba≈ülatƒ±yorum"),
                ("Hesap bilgilerimi g√∂rmek istiyorum", "Hesap bilgilerinizi g√∂steriyorum"),
                ("Hat √ßalƒ±ndƒ±, ne yapmalƒ±yƒ±m?", "Hemen hat dondurma i≈ülemi yapƒ±yorum"),
                ("Hesap g√ºvenliƒüi i√ßin ne yapabilirim?", "G√ºvenlik √∂nerilerini a√ßƒ±klƒ±yorum"),
                ("Hesap eri≈üim sorunu ya≈üƒ±yorum", "Eri≈üim sorununuzu √ß√∂z√ºyorum")
            ],
            "advanced_services": [
                ("5G kapsama alanƒ±nda mƒ±yƒ±m?", "5G kapsama alanƒ±nƒ±zƒ± kontrol ediyorum"),
                ("Acil durum servisi aktif etmek istiyorum", "Acil durum servisinizi aktif ediyorum"),
                ("K√ºlt√ºrel tercihlerimi g√ºncellemek istiyorum", "K√ºlt√ºrel tercihlerinizi g√ºncelliyorum"),
                ("√ñzel hizmet paketi almak istiyorum", "√ñzel hizmet paketlerini g√∂steriyorum"),
                ("Kurumsal hizmet teklifi istiyorum", "Kurumsal teklifleri hazƒ±rlƒ±yorum"),
                ("VIP m√º≈üteri hizmetleri istiyorum", "VIP hizmetlerinizi aktif ediyorum"),
                ("√ñzel teknik destek istiyorum", "√ñzel teknik desteƒüi y√∂nlendiriyorum"),
                ("Geli≈ümi≈ü g√ºvenlik hizmeti istiyorum", "G√ºvenlik hizmetlerini a√ßƒ±klƒ±yorum"),
                ("√ñzel veri paketi istiyorum", "√ñzel veri paketlerini g√∂steriyorum"),
                ("Premium hizmet paketi almak istiyorum", "Premium paketleri listeliyorum")
            ]
        }
        
        seed_dialogs = []
        
        for i in range(1, num_seeds + 1):
            # Rastgele senaryo se√ß
            scenario_type = random.choice(list(base_scenarios.keys()))
            scenario_templates = base_scenarios[scenario_type]
            
            # Rastgele template se√ß
            input_template, response_template = random.choice(scenario_templates)
            
            # Template'i varyasyonlarla zenginle≈ütir
            user_input = self._vary_template(input_template)
            response_text = self._vary_template(response_template)
            
            # Karma≈üƒ±klƒ±k seviyesi belirle
            complexity = random.choice(["basic", "medium", "advanced"])
            
            seed_dialogs.append({
                'id': i,
                'input_text': user_input,
                'response_text': response_text,
                'scenario_type': scenario_type,
                'complexity_level': complexity
            })
        
        logger.info(f"‚úÖ {len(seed_dialogs)} adet seed diyalog √ºretildi")
        return seed_dialogs

    def _vary_template(self, template: str) -> str:
        """Template'i √ße≈üitli varyasyonlarla zenginle≈ütirir"""
        variations = [
            template,
            f"{random.choice(self.advanced_templates['greetings'])}, {template}",
            f"{template} {random.choice(['efendim', 'l√ºtfen', 'acaba', 'belki'])}",
            f"{template} {random.choice(['olabilir mi?', 'm√ºmk√ºn m√º?', 'yapabilir misiniz?'])}",
            f"{random.choice(['Merhaba, ', 'Selam, ', 'ƒ∞yi g√ºnler, '])}{template}",
            f"{template} {random.choice(['yardƒ±mcƒ± olur musunuz?', 'bakabilir misiniz?', 'kontrol edebilir misiniz?'])}"
        ]
        return random.choice(variations)

    def generate_massive_dataset(self, num_seeds: int = 1000, variants_per_seed: int = 20) -> List[Dict[str, Any]]:
        """B√ºy√ºk √∂l√ßekli dataset √ºretir"""
        logger.info(f"üöÄ Massive dataset √ºretimi ba≈ülatƒ±lƒ±yor...")
        logger.info(f"üìä {num_seeds} seed √ó {variants_per_seed} varyant = {num_seeds * variants_per_seed} toplam diyalog")
        
        # Seed diyaloglarƒ± √ºret
        seed_dialogs = self.generate_massive_seed_dialogs(num_seeds)
        
        # Paralel i≈üleme i√ßin chunk'lara b√∂l
        chunk_size = 100
        chunks = [seed_dialogs[i:i + chunk_size] for i in range(0, len(seed_dialogs), chunk_size)]
        
        all_dialogues = []
        
        # Her chunk'ƒ± paralel i≈üle
        with ProcessPoolExecutor(max_workers=mp.cpu_count()) as executor:
            futures = []
            for chunk in chunks:
                future = executor.submit(self._process_chunk, chunk, variants_per_seed)
                futures.append(future)
            
            # Sonu√ßlarƒ± topla
            for future in as_completed(futures):
                try:
                    chunk_dialogues = future.result()
                    all_dialogues.extend(chunk_dialogues)
                    logger.info(f"‚úÖ Chunk i≈ülendi: {len(chunk_dialogues)} diyalog")
                except Exception as e:
                    logger.error(f"‚ùå Chunk i≈ülenirken hata: {e}")
        
        logger.info(f"‚úÖ Toplam {len(all_dialogues)} adet diyalog √ºretildi")
        return all_dialogues

    def _process_chunk(self, seed_chunk: List[Dict[str, Any]], variants_per_seed: int) -> List[Dict[str, Any]]:
        """Bir chunk'ƒ± i≈üler (paralel i≈üleme i√ßin)"""
        chunk_dialogues = []
        
        for seed_dialog in seed_chunk:
            # Her seed i√ßin √ßok sayƒ±da varyant √ºret
            for i in range(variants_per_seed):
                # Input ve response varyantlarƒ± √ºret
                input_variant = self._generate_advanced_variant(seed_dialog['input_text'])
                response_variant = self._generate_advanced_variant(seed_dialog['response_text'])
                
                # Tool call olasƒ±lƒ±ƒüƒ±
                use_tool_call = random.random() < 0.6  # %60 olasƒ±lƒ±k
                
                if use_tool_call:
                    dialogue = self._create_advanced_tool_call_dialogue(
                        seed_dialog['scenario_type'],
                        input_variant,
                        response_variant
                    )
                else:
                    dialogue = self._create_simple_dialogue(input_variant, response_variant)
                
                # Geli≈ümi≈ü augmentation uygula
                dialogue = self._apply_advanced_augmentation(dialogue)
                
                # Metadata ekle
                dialogue.update({
                    "id": f"{seed_dialog['id']}_{i+1}",
                    "seed_id": seed_dialog['id'],
                    "scenario_type": seed_dialog['scenario_type'],
                    "complexity_level": seed_dialog['complexity_level'],
                    "variant_number": i + 1,
                    "has_tool_call": use_tool_call,
                    "generated_at": datetime.now().isoformat(),
                    "augmentation_applied": True,
                    "massive_generation": True
                })
                
                chunk_dialogues.append(dialogue)
        
        return chunk_dialogues

    def _generate_advanced_variant(self, text: str) -> str:
        """Geli≈ümi≈ü varyant √ºretimi"""
        variant = text
        
        # Greeting deƒüi≈üiklikleri
        for greeting in self.advanced_templates["greetings"]:
            if any(g in variant for g in ["Merhaba", "Selam", "ƒ∞yi g√ºnler"]):
                variant = re.sub(r'(Merhaba|Selam|ƒ∞yi g√ºnler)[^!]*', greeting, variant, count=1)
                break
        
        # Processing deƒüi≈üiklikleri
        for processing in self.advanced_templates["processing"]:
            if any(p in variant for p in ["Kontrol ediyorum", "Bakƒ±yorum", "ƒ∞nceliyorum"]):
                variant = re.sub(r'(Kontrol ediyorum|Bakƒ±yorum|ƒ∞nceliyorum)', processing, variant, count=1)
                break
        
        # Noktalama varyasyonlarƒ±
        if random.random() < 0.4:
            variant = variant.replace(".", random.choice(self.advanced_augmentation["punctuation"]))
        
        # G√ºr√ºlt√º kelimeleri ekleme
        if random.random() < 0.3:
            noise_word = random.choice(self.advanced_augmentation["noise_words"])
            variant = f"{noise_word}, {variant}"
        
        # Filler phrases ekleme
        if random.random() < 0.25:
            filler = random.choice(self.advanced_augmentation["fillers"])
            variant = f"{filler}, {variant}"
        
        return variant

    def _create_advanced_tool_call_dialogue(self, scenario_type: str, user_input: str, response_text: str) -> Dict[str, Any]:
        """Geli≈ümi≈ü tool call diyalogu olu≈üturur"""
        # Basit tool call yapƒ±sƒ± (schema validation hatalarƒ±nƒ± √∂nlemek i√ßin)
        return {
            "donguler": [
                {
                    "rol": "kullanici",
                    "icerik": user_input
                },
                {
                    "rol": "asistan",
                    "icerik": f"Bu i≈ülem i√ßin {scenario_type} fonksiyonunu √ßaƒüƒ±rƒ±yorum.",
                    "arac_cagrilari": [
                        {
                            "fonksiyon": f"{scenario_type}_function",
                            "parametreler": {"user_id": 12345}
                        }
                    ]
                },
                {
                    "rol": "arac",
                    "icerik": json.dumps({"status": "success", "data": "mock_response"}, ensure_ascii=False)
                },
                {
                    "rol": "asistan",
                    "icerik": response_text
                }
            ]
        }

    def _create_simple_dialogue(self, user_input: str, response_text: str) -> Dict[str, Any]:
        """Basit diyalog olu≈üturur"""
        return {
            "donguler": [
                {
                    "rol": "kullanici",
                    "icerik": user_input
                },
                {
                    "rol": "asistan",
                    "icerik": response_text
                }
            ]
        }

    def _apply_advanced_augmentation(self, dialogue: Dict[str, Any]) -> Dict[str, Any]:
        """Geli≈ümi≈ü augmentation uygular"""
        augmented_dialogue = dialogue.copy()
        
        for turn in augmented_dialogue["donguler"]:
            if turn["rol"] == "kullanici":
                content = turn["icerik"]
                
                # Token masking
                if random.random() < 0.15:
                    words = content.split()
                    if len(words) > 3:
                        mask_index = random.randint(0, len(words) - 1)
                        words[mask_index] = "[MASK]"
                        content = " ".join(words)
                
                # Noktalama varyasyonlarƒ±
                if random.random() < 0.2:
                    content = content.replace(".", random.choice(self.advanced_augmentation["punctuation"]))
                
                # G√ºr√ºlt√º ekleme
                if random.random() < 0.15:
                    noise_word = random.choice(self.advanced_augmentation["noise_words"])
                    content = f"{noise_word}, {content}"
                
                turn["icerik"] = content
            
            elif turn["rol"] == "asistan":
                content = turn["icerik"]
                
                # Filler phrases ekleme
                if random.random() < 0.15:
                    filler = random.choice(self.advanced_augmentation["fillers"])
                    content = f"{filler}, {content}"
                
                # Noktalama varyasyonlarƒ±
                if random.random() < 0.15:
                    content = content.replace(".", random.choice(self.advanced_augmentation["punctuation"]))
                
                turn["icerik"] = content
        
        return augmented_dialogue

    def save_massive_dataset(self, dataset: List[Dict[str, Any]]):
        """B√ºy√ºk dataset'i kaydeder"""
        # Output dizinini olu≈ütur
        self.output_file.parent.mkdir(parents=True, exist_ok=True)
        
        # JSON Lines formatƒ±nda kaydet
        with open(self.output_file, 'w', encoding='utf-8') as f:
            for dialogue in dataset:
                f.write(json.dumps(dialogue, ensure_ascii=False) + '\n')
        
        logger.info(f"üíæ Massive dataset kaydedildi: {self.output_file}")
        logger.info(f"üìä Toplam {len(dataset)} adet diyalog")

def main():
    """Ana √ßalƒ±≈ütƒ±rma fonksiyonu"""
    logger.info("üöÄ Massive Telekom Dialogs Generator ba≈ülatƒ±lƒ±yor...")
    
    # Generator'ƒ± ba≈ülat
    generator = MassiveDataGenerator()
    
    # B√ºy√ºk dataset √ºret (1000 seed √ó 20 varyant = 20,000 diyalog)
    dataset = generator.generate_massive_dataset(
        num_seeds=1000,
        variants_per_seed=20
    )
    
    if not dataset:
        logger.error("‚ùå Massive dataset √ºretilemedi!")
        return
    
    # Dataset'i kaydet
    generator.save_massive_dataset(dataset)
    
    logger.info("üéâ Massive Telekom Dialogs Generator tamamlandƒ±!")
    logger.info(f"üìÅ √áƒ±ktƒ±: {generator.output_file}")
    logger.info(f"üìä Toplam: {len(dataset)} diyalog")

if __name__ == "__main__":
    main() 